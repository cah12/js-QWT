1. Run the build.bat in tools folder.
2. Open the app.js located in the www-built folder in Notepadd++.
3. Minimized the file.
4. From the Edit menu -> line operations -> remove empty lines.
5. Except for require.js, delete all files in www-built -> lib folder.
6. Copy the app.js file from the www-built folder to C:\gitProjects\gitGrapher\grapher folder (i.e Replace the old app.js with the updated one)

replace app.js C:\gitProjects\gitGrapher\grapher

7. Launch the Git GUI from C:\gitProjects\gitGrapher\grapher folder. Use the info... below to commit and push.

https://github.com/cah12/cah12.github.io.git
GitHub    corwin_hope@yahoo.com    CAHanthony12



//////////
uglifyjs [input files] [options]
uglifyjs app.js -c -m -o app.js

 -V, --version                output the version number
    -p, --parse <options>        Specify parser options.
    -c, --compress [options]     Enable compressor/specify compressor options.
    -m, --mangle [options]       Mangle names/specify mangler options.
    --mangle-props [options]     Mangle properties/specify mangler options.
    -b, --beautify [options]     Beautify output/specify output options.
    -o, --output <file>          Output file (default STDOUT).
    --comments [filter]          Preserve copyright comments in the output.
    --config-file <file>         Read minify() options from JSON file.
    -d, --define <expr>[=value]  Global definitions.
    --ecma <version>             Specify ECMAScript release: 5, 6, 7 or 8.
    --ie8                        Support non-standard Internet Explorer 8.
    --keep-classnames            Do not mangle/drop class names.
    --keep-fnames                Do not mangle/drop function names. Useful for code relying on Function.prototype.name.
    --name-cache <file>          File to hold mangled name mappings.
    --rename                     Force symbol expansion.
    --no-rename                  Disable symbol expansion.
    --safari10                   Support non-standard Safari 10.
    --self                       Build UglifyJS as a library (implies --wrap UglifyJS)
    --source-map [options]       Enable source map/specify source map options.
    --timings                    Display operations run time on STDERR.
    --toplevel                   Compress and/or mangle variables in toplevel scope.
    --verbose                    Print diagnostic messages.
    --warn                       Print warning messages.
    --wrap <name>                Embed everything as a function with “exports” corresponding to “name” globally.
    -h, --help                   output usage information







/////////////////////////////////
//node srcDepends1.js
const fs = require('fs');

const Path = require('path');

function wait(ms) {
    var d = new Date();
    var d2 = null;
    do {
        d2 = new Date();
    } while (d2 - d < ms);
}

/* var fd;

fs.open('../src/config.js', 'r+', function(err, _fd) {
	fd = _fd;
    console.log(fd);
   if (err) {
       return console.error(err);
   }
}); */

var append = false;

function processFile(path) {
    const text = fs.readFileSync(path, 'utf8');
    text.split(/\r?\n/).forEach(function (line) {
        if (line.match('include')) {
            line = line.replace('include', '');
            //console.log(line);
            //console.log(path + '\n');
			if(append){
				fs.writeFile('../src/config.js', ", " + line + ", " + "'" + path + "'", {'flag':'a'}, function () {});
				//fs.writeFile('../src/config.js', line + ", ", {'flag':'a'}, function () {});
				//fs.writeFile('../src/config.js', path, {'flag':'a'}, function () {});
			}else{
				fs.writeFile('../src/config.js', "var config = [" + line + ", " + "'" + path + "'", function () {});
				append = true;
			}
			//wait(5000);
        }
    });
}


function buildTree(startPath) {
    fs.readdir(startPath, function (err, entries) {
        entries.forEach(function (file, ind) {
            const path = Path.join(startPath, file);
            if (fs.lstatSync(path).isDirectory()) {
                buildTree(path);
            } else if (file.match(/\.js$/)) {
                if ((path.indexOf('srcDepends.js') < 0) && (path.indexOf('srcDepends1.js') < 0)) {
                    processFile(path);
                }
            }			
        });

    });
   //
}
buildTree('../src');
wait(5000);

 fs.readFile('../src/config.js', function (err, data) {
    if (err) throw err;
	//wait(5000);
    //theFile = data.toString();//.split("\n");
	//wait(1000);
	//console.log(theFile);
    //theFile.splice(-3, 3);
    fs.writeFile('../src/config.js', "];",  {'flag':'a'}, function (err) {
        if (err) {
            return console.log(err);
        }
    }); 
});  
// wait(4000);
// fs.writeFile('../src/config.js', " ];", {'flag':'a'}, function () {});

















